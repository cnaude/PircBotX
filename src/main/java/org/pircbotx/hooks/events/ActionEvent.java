/**
 * Copyright (C) 2010-2013 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import javax.annotation.Nullable;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import org.pircbotx.Channel;
import org.pircbotx.PircBotX;
import org.pircbotx.User;
import org.pircbotx.hooks.Event;
import org.pircbotx.hooks.types.GenericChannelUserEvent;
import org.pircbotx.hooks.types.GenericMessageEvent;

/**
 * Called whenever an ACTION is sent from a user. E.g.
 * such events generated by typing "/me goes shopping" in most IRC clients.
 * @author Leon Blakey <lord.quackstar at gmail.com>
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class ActionEvent<T extends PircBotX> extends Event<T> implements GenericMessageEvent<T>, GenericChannelUserEvent<T> {
	@Getter(onMethod_={@Override})
	protected final User user;
	@Getter(onMethod_={@Override})
	protected final Channel channel;
	protected final String action;

	/**
	 * Default constructor to setup object. Timestamp is automatically set
	 * to current time as reported by {@link System#currentTimeMillis() }
	 * @param user The user object representing the user that sent the message
	 * @param channel The channel object representing the target channel of the
	 * action. A value of <code>null</code> means that this is
	 * is a private message, not a channel
	 * @param action The action carried out by the user.
	 */
	public ActionEvent(T bot, @NonNull User user, Channel channel, @NonNull String action) {
		super(bot);
		this.user = user;
		this.channel = channel;
		this.action = action;
	}

	/**
	 * Returns the action sent by the user. Same result as getAction
	 * @return Action sent by the user
	 */
	@Override
	public String getMessage() {
		return action;
	}

	/**
	 * Respond to an action with an action in either the channel that the message 
	 * came from or a private message.
	 * <p>
	 * Example
	 * <pre>
	 *   * SomeUser thinks that this is awesome
	 *   * PircBotX agrees
	 * </pre>
	 * @param response The response to send
	 */
	@Override
	public void respond(@Nullable String response) {
		if (getChannel() == null)
			getUser().send().action(response);
		else
			getChannel().send().action(response);
	}
}
